     1                                  
     2 00000000 B40E                    mov ah, 0x0e
     3 00000002 B048                    mov al, 'H'
     4 00000004 CD10                    int 0x10
     5 00000006 B065                    mov al, 'e'
     6 00000008 CD10                    int 0x10
     7 0000000A B06C                    mov al, 'l'
     8 0000000C CD10                    int 0x10
     9 0000000E CD10                    int 0x10
    10 00000010 B06F                    mov al, 'o'
    11 00000012 CD10                    int 0x10
    12 00000014 B020                    mov al, ' '
    13 00000016 CD10                    int 0x10
    14                                  
    15 00000018 B40E                    mov ah, 0x0e
    16 0000001A B048                    mov al, 'H'
    17 0000001C CD10                    int 0x10
    18 0000001E B065                    mov al, 'e'
    19 00000020 CD10                    int 0x10
    20 00000022 B06C                    mov al, 'l'
    21 00000024 CD10                    int 0x10
    22 00000026 CD10                    int 0x10
    23 00000028 B06F                    mov al, 'o'
    24 0000002A CD10                    int 0x10
    25 0000002C B020                    mov al, ' '
    26 0000002E CD10                    int 0x10
    27                                  
    28 00000030 B40E                    mov ah, 0x0e
    29 00000032 B048                    mov al, 'H'
    30 00000034 CD10                    int 0x10
    31 00000036 B065                    mov al, 'e'
    32 00000038 CD10                    int 0x10
    33 0000003A B06C                    mov al, 'l'
    34 0000003C CD10                    int 0x10
    35 0000003E CD10                    int 0x10
    36 00000040 B06F                    mov al, 'o'
    37 00000042 CD10                    int 0x10
    38 00000044 B020                    mov al, ' '
    39 00000046 CD10                    int 0x10
    40                                  
    41 00000048 B40E                    mov ah, 0x0e
    42 0000004A B048                    mov al, 'H'
    43 0000004C CD10                    int 0x10
    44 0000004E B065                    mov al, 'e'
    45 00000050 CD10                    int 0x10
    46 00000052 B06C                    mov al, 'l'
    47 00000054 CD10                    int 0x10
    48 00000056 CD10                    int 0x10
    49 00000058 B06F                    mov al, 'o'
    50 0000005A CD10                    int 0x10
    51 0000005C B020                    mov al, ' '
    52 0000005E CD10                    int 0x10
    53                                  
    54 00000060 B40E                    mov ah, 0x0e
    55 00000062 B048                    mov al, 'H'
    56 00000064 CD10                    int 0x10
    57 00000066 B065                    mov al, 'e'
    58 00000068 CD10                    int 0x10
    59 0000006A B06C                    mov al, 'l'
    60 0000006C CD10                    int 0x10
    61 0000006E CD10                    int 0x10
    62 00000070 B06F                    mov al, 'o'
    63 00000072 CD10                    int 0x10
    64 00000074 B020                    mov al, ' '
    65 00000076 CD10                    int 0x10
    66                                  
    67                                  ; This is an infinite loop. It works because $ evaluates to the beginning of the current line
    68 00000078 EBFE                    jmp $ 
    69                                  
    70                                  ; Fill with 510 zeros minus the size of the previous code
    71 0000007A 00<rept>                times 510-($-$$) db 0
    72                                  ; 
    73                                  ; Magic number below indicates to BIOS that this is a boot sector.
    74                                  ; This point confused me at first: We are literally putting 0xaa55 at the end of 510 bytes
    75                                  ; (so it fills out the 511 and 512 byes in the sector). Everything *before* this is still
    76                                  ; part of the same sector -- the BIOS will read the machien code an execute whatever it finds
    77                                  ; as long as we still have 0xaa55 in the last two bytes of the 512-byte vector. That's why we
    78                                  ; the `times 510-($-$$) db 0` line above.
    79                                  ; You could, alternatively, just fill the space by repeating the code to printe 'Hello' over
    80                                  ; and over until we get to to 510 bytes. Fun fact: if you manage to get MORE than 510 bytes,
    81                                  ; the above times line will fail to compile because it becomes a negative!
    82 000001FE 55AA                    dw 0xaa55 
    83                                  
    84                                  
