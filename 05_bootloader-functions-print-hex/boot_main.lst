     1                                  ; This simple bootsector prints stuff!
     2                                  
     3                                  [org 0x7c00]
     4                                  
     5 00000000 EB50                    jmp start           ; We need to jump over the print label so we don't automatically 
     6                                                      ; run the "function"
     7                                  
     8                                  %include "print_hex.asm"    
     1                              <1> [org 0x7c00]
     2                              <1> 
     3                              <1> prehex:
     4 00000002 60                  <1>     pusha           ; Save all the registers!
     5 00000003 B40E                <1>     mov ah, 0x0e    ; Put us in TTY mode
     6 00000005 B90000              <1>     mov cx, 0       ; cx is loop counter
     7                              <1>     
     8                              <1> hex_loop:
     9 00000008 83F904              <1>     cmp cx, 4       ; loop 4 times
    10 0000000B 741C                <1>     je  done
    11                              <1>     
    12 0000000D 89D0                <1>     mov ax, dx
    13 0000000F 83E00F              <1>     and ax, 0x000f
    14 00000012 0430                <1>     add al, 0x30
    15 00000014 3C39                <1>     cmp al, 0x39
    16 00000016 7E02                <1>     jle add_to_string
    17 00000018 0407                <1>     add al, 7 
    18                              <1> 
    19                              <1> add_to_string:
    20 0000001A BB[3600]            <1>     mov bx, HEX_OUT + 5
    21 0000001D 29CB                <1>     sub bx, cx
    22 0000001F 8807                <1>     mov [bx], al
    23 00000021 C1CA04              <1>     ror dx, 4
    24                              <1> 
    25 00000024 83C101              <1>     add cx, 1
    26 00000027 EBDF                <1>     jmp hex_loop
    27                              <1> 
    28                              <1> done:
    29 00000029 BB[3100]            <1>     mov bx, HEX_OUT
    30 0000002C E80900              <1>     call preprint
    31                              <1> 
    32                              <1> 
    33 0000002F 61                  <1>     popa            ; Restore the registers
    34 00000030 C3                  <1>     ret             ; Return to where we were called
    35                              <1> 
    36                              <1> HEX_OUT:
    37 00000031 30783030303000      <1>     db '0x0000', 0
    38                              <1> 
    39                              <1> 
    40                              <1> 
     9                                  %include "boot_include_file.asm
     9          ******************       warning: unterminated string
     1                              <1> [org 0x7c00]
     2                              <1> 
     3                              <1> preprint:
     4 00000038 60                  <1>     pusha           ; Save all the registers!
     5 00000039 B40E                <1>     mov ah, 0x0e    ; Put us in TTY mode
     6 0000003B 8A07                <1>     mov al, [bx]    ; Copy the first character to al register for printing
     7                              <1> 
     8                              <1> print:
     9 0000003D CD10                <1>     int 0x10        ; Print whatever is in al
    10 0000003F 83C301              <1>     add bx, 1       ; Increment the "pointer" to point to the next character in the string
    11 00000042 8A07                <1>     mov al, [bx]    ; Copy the next character into al
    12 00000044 3C00                <1>     cmp al, 0x00    ; Check if al now contains a null character
    13 00000046 75F5                <1>     jne print       ; If al does not contain a null character, loop back to print
    14                              <1> 
    15 00000048 B40A                <1>     mov ah, 0x0a
    16 0000004A CD10                <1>     int 0x10
    17 0000004C B40D                <1>     mov ah, 0x0d
    18 0000004E CD10                <1>     int 0x10
    19                              <1> 
    20 00000050 61                  <1>     popa            ; Restore the registers
    21 00000051 C3                  <1>     ret             ; Return to where we were called
    22                              <1> 
    23                              <1> 
    10                                  
    11                                  start:
    12 00000052 BD0080                      mov bp, 0x8000  ; Set the stack's base pointer
    13 00000055 89EC                        mov sp, bp      ; And set the stack pointer to the same location
    14                                  
    15 00000057 BB[6300]                    mov bx, the_string      ; Store the address of the_string in bx to be accessed by preprint
    16 0000005A E8DBFF                      call preprint           ; Call the print function!
    17                                  
    18 0000005D BAFE12                      mov dx, 0x12fe
    19 00000060 E89FFF                      call prehex
    20                                  
    21                                  
    22                                  the_string:
    23 00000063 546869732069732061-         db "This is a string to print. ",0
    23 0000006C 20737472696E672074-
    23 00000075 6F207072696E742E20-
    23 0000007E 00                 
    24                                  
    25 0000007F EBFE                    jmp $ ; infinite loop
    26                                  
    27                                  ; zero padding and magic bios number
    28 00000081 00<rept>                times 510-($-$$) db 0
    29 000001FE 55AA                    dw 0xaa55
