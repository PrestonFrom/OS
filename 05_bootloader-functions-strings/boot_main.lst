     1                                  ; This simple bootsector prints stuff!
     2                                  
     3                                  [org 0x7c00]
     4                                  
     5 00000000 EB12                    jmp start           ; We need to jump over the print label so we don't automatically 
     6                                                      ; run the "function"
     7                                  
     8                                  %include "boot_include_file.asm"    ; This includes the contents of "boot_include_file.asm"
     1                              <1> [org 0x7c00]
     2                              <1> 
     3                              <1> preprint:
     4 00000002 60                  <1>     pusha           ; Save all the registers!
     5 00000003 B40E                <1>     mov ah, 0x0e    ; Put us in TTY mode
     6 00000005 8A07                <1>     mov al, [bx]    ; Copy the first character to al register for printing
     7                              <1> 
     8                              <1> print:
     9 00000007 CD10                <1>     int 0x10        ; Print whatever is in al
    10 00000009 83C301              <1>     add bx, 1       ; Increment the "pointer" to point to the next character in the string
    11 0000000C 8A07                <1>     mov al, [bx]    ; Copy the next character into al
    12 0000000E 3C00                <1>     cmp al, 0x00    ; Check if al now contains a null character
    13 00000010 75F5                <1>     jne print       ; If al does not contain a null character, loop back to print
    14 00000012 61                  <1>     popa            ; Restore the registers
    15 00000013 C3                  <1>     ret             ; Return to where we were called
    16                              <1> 
    17                              <1> 
     9                                                                      ; directly in this file, replacing this line.
    10                                                                      ; Since it's literally just adding in the assembly in the
    11                                                                      ; other file, we still need the 'jmp start' line above!
    12                                  
    13                                  start:
    14 00000014 BD0080                      mov bp, 0x8000  ; Set the stack's base pointer
    15 00000017 89EC                        mov sp, bp      ; And set the stack pointer to the same location
    16                                  
    17 00000019 BB[2500]                    mov bx, the_string      ; Store the address of the_string in bx to be accessed by preprint
    18 0000001C E8E3FF                      call preprint           ; Call the print function!
    19 0000001F BB[4100]                    mov bx, another_string  ; Repeat for another_string
    20 00000022 E8DDFF                      call preprint           ; Call it again
    21                                  
    22                                  
    23                                  the_string:
    24 00000025 546869732069732061-         db "This is a string to print. ",0
    24 0000002E 20737472696E672074-
    24 00000037 6F207072696E742E20-
    24 00000040 00                 
    25                                  
    26                                  another_string:
    27 00000041 48657265277320616E-         db "Here's another one!",0
    27 0000004A 6F74686572206F6E65-
    27 00000053 2100               
    28                                  
    29                                  
    30 00000055 EBFE                    jmp $ ; infinite loop
    31                                  
    32                                  ; zero padding and magic bios number
    33 00000057 00<rept>                times 510-($-$$) db 0
    34 000001FE 55AA                    dw 0xaa55
