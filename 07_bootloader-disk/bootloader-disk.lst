     1 00000000 BD0080                  mov bp, 0x8000                  ; Set stack base pointer far away
     2 00000003 89EC                    mov sp, bp                      ; Set stack pointer to base pointer because stack is empty
     3                                  
     4 00000005 BB0095                  mov bx, 0x9500                  ; This tells the bios where to read the sector data to in memory.
     5                                                                  ; It indirectly sets ES (extra segment register) to 0x9000.
     6                                                                  ; You can change this and also change the 0x9000 below.
     7 00000008 B603                    mov dh, 3                       ; Read 3 sectors
     8 0000000A E86700                  call disk_load
     9                                  
    10 0000000D 8B160095                mov dx, [0x9500]                ; Print the first two bytes from sector 2
    11 00000011 E81000                  call prehex
    12                                  
    13 00000014 8B160097                mov dx, [0x9500 + 512]          ; Print the first two bytes from sector 3
    14 00000018 E80900                  call prehex
    15                                  
    16 0000001B 8B160099                mov dx, [0x9500 + 512 + 512]    ; Print the first two bytes from sector 4
    17 0000001F E80200                  call prehex
    18                                  
    19 00000022 EBFE                    jmp $ ; Loop forever
    20                                  
    21                                  ; Include all our print functions
    22                                  %include "../05_bootloader-functions-print-hex/print_hex.asm"
     1                              <1> [org 0x7c00]
     2                              <1> 
     3                              <1> prehex:
     4 00000024 60                  <1>     pusha                   ; Save all the registers!
     5 00000025 B40E                <1>     mov ah, 0x0e            ; Put us in TTY mode
     6 00000027 B90000              <1>     mov cx, 0               ; cx is loop counter
     7                              <1>     
     8                              <1> hex_loop:
     9 0000002A 83F904              <1>     cmp cx, 4               ; loop 4 times
    10 0000002D 741C                <1>     je  done
    11                              <1>     
    12 0000002F 89D0                <1>     mov ax, dx              ; dx holds the value to hexify, ax is where do work
    13 00000031 83E00F              <1>     and ax, 0x000f          ; get the last 16 bits
    14 00000034 0430                <1>     add al, 0x30            ; Convert to number
    15 00000036 3C39                <1>     cmp al, 0x39            ; If the conversion is actually a number...
    16 00000038 7E02                <1>     jle add_to_string       ; ...add it to the string
    17 0000003A 0407                <1>     add al, 7               ; Otherwise, we need to add 7 to bump it up to A-F
    18                              <1> 
    19                              <1> add_to_string:
    20 0000003C BB[5800]            <1>     mov bx, HEX_OUT + 5     ; Get the address of last byte in HEX_OUT into bx
    21 0000003F 29CB                <1>     sub bx, cx              ; Move to the left from the end by the number in the counter
    22 00000041 8807                <1>     mov [bx], al            ; Set the value pointed at by bx to whatever is in al
    23 00000043 C1CA04              <1>     ror dx, 4               ; Rotate dx to the right four places to get the next item
    24                              <1> 
    25 00000046 83C101              <1>     add cx, 1               ; Increment the loop counter
    26 00000049 EBDF                <1>     jmp hex_loop            ; Go back to the beginning of the loop
    27                              <1> 
    28                              <1> done:
    29 0000004B BB[5300]            <1>     mov bx, HEX_OUT         ; Move the address of HEX_OUT to bx
    30 0000004E E80900              <1>     call preprint           ; Now print the string in HEX_OUT
    31                              <1> 
    32                              <1> 
    33 00000051 61                  <1>     popa                    ; Restore the registers
    34 00000052 C3                  <1>     ret                     ; Return to where we were called
    35                              <1> 
    36                              <1> HEX_OUT:
    37 00000053 30783030303000      <1>     db '0x0000', 0
    38                              <1> 
    39                              <1> 
    40                              <1> 
    23                                  %include "../05_bootloader-functions-print-hex/boot_include_file.asm"
     1                              <1> [org 0x7c00]
     2                              <1> 
     3                              <1> preprint:
     4 0000005A 60                  <1>     pusha           ; Save all the registers!
     5 0000005B B40E                <1>     mov ah, 0x0e    ; Put us in TTY mode
     6 0000005D 8A07                <1>     mov al, [bx]    ; Copy the first character to al register for printing
     7                              <1> 
     8                              <1> print:
     9 0000005F CD10                <1>     int 0x10        ; Print whatever is in al
    10 00000061 83C301              <1>     add bx, 1       ; Increment the "pointer" to point to the next character in the string
    11 00000064 8A07                <1>     mov al, [bx]    ; Copy the next character into al
    12 00000066 3C00                <1>     cmp al, 0x00    ; Check if al now contains a null character
    13 00000068 75F5                <1>     jne print       ; If al does not contain a null character, loop back to print
    14                              <1> 
    15 0000006A B40A                <1>     mov ah, 0x0a
    16 0000006C CD10                <1>     int 0x10
    17 0000006E B40D                <1>     mov ah, 0x0d
    18 00000070 CD10                <1>     int 0x10
    19                              <1> 
    20 00000072 61                  <1>     popa            ; Restore the registers
    21 00000073 C3                  <1>     ret             ; Return to where we were called
    22                              <1> 
    23                              <1> 
    24                                  
    25                                  ; Also include the functions to read from sectors
    26                                  %include "bootloader-sect-disk.asm"
     1                              <1> disk_load:
     2 00000074 60                  <1>     pusha                   ; Save all general purpose registers
     3 00000075 52                  <1>     push dx                 ; Save dx since it contains our input value
     4                              <1> 
     5 00000076 B402                <1>     mov ah, 0x02            ; 0x02 is needed to call the BIOS read sector function
     6 00000078 88F0                <1>     mov al, dh              ; This tells the BIOS how many sectors to read
     7 0000007A B102                <1>     mov cl, 0x02            ; cl tells the BIOS which sector to start the read at. 
     8                              <1>                             ; (1 is the boot sector so we start at the second sector.)
     9 0000007C B500                <1>     mov ch, 0x00            ; ch contains the cylinder to read
    10 0000007E B600                <1>     mov dh, 0x00            ; dh contains the head number
    11                              <1> 
    12 00000080 CD13                <1>     int 0x13                ; BIOS interrupt
    13 00000082 7207                <1>     jc disk_error           ; Jump to disk_error if there is an error
    14                              <1>                             ; (An error is indicated by setting the cary flag)
    15                              <1> 
    16 00000084 5A                  <1>     pop dx                  ; Restore dx
    17 00000085 38F0                <1>     cmp al, dh              ; Check how many sectors were actually read (al) to the
    18                              <1>                             ; the expected number to read (dh)
    19 00000087 750F                <1>     jne sectors_error       ; If they're not the same, print an error
    20                              <1> 
    21 00000089 61                  <1>     popa                    ; Otherwise, restore regisers and return
    22 0000008A C3                  <1>     ret
    23                              <1> 
    24                              <1> disk_error:
    25 0000008B BB[A000]            <1>     mov bx, DISK_ERROR      ; Set bx to point at the DISK_ERROR string
    26 0000008E E8C9FF              <1>     call preprint           ; And print it.
    27 00000091 88E6                <1>     mov dh, ah              ; ah contains the error code and dl contains the disk drive
    28                              <1>                             ; that had the error, so dx = dh (error) and dl (which drive)
    29 00000093 E88EFF              <1>     call prehex             ; Print as hex
    30 00000096 EB06                <1>     jmp disk_loop
    31                              <1> 
    32                              <1> sectors_error:
    33 00000098 BB[B000]            <1>     mov bx, SECTORS_ERROR   ; Just print it!
    34 0000009B E8BCFF              <1>     call preprint
    35                              <1> 
    36                              <1> disk_loop:
    37 0000009E EBFE                <1>     jmp $                   ; Nothing else we can do
    38                              <1> 
    39 000000A0 4469736B2072656164- <1> DISK_ERROR: db "Disk read error", 0
    39 000000A9 206572726F7200      <1>
    40 000000B0 496E636F7272656374- <1> SECTORS_ERROR: db "Incorrect number of sectors read", 0
    40 000000B9 206E756D626572206F- <1>
    40 000000C2 6620736563746F7273- <1>
    40 000000CB 207265616400        <1>
    27                                  
    28                                  ; Make sure our bootsector looks right!
    29 000000D1 00<rept>                times 510 - ($ - $$) db 0
    30 000001FE 55AA                    dw 0xaa55
    31                                  
    32 00000200 DADA<rept>              times 256 dw 0xdada             ; Fill sector 2 with 0xdada
    33 00000400 CEFA<rept>              times 256 dw 0xface             ; Fill sector 3 with 0xface
    34 00000600 1010<rept>              times 256 dw 0x1010             ; Fill sector 3 with 0x1010
    35                                  
