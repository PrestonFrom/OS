     1                                  ; This file is essentially copied from 
     2                                  ; https://github.com/cfenollosa/os-tutorial/tree/master/10-32bit-enter
     3                                  
     4                                  [org 0x7c00]                    ; bootloader offset
     5 00000000 BD0090                      mov     bp, 0x9000          ; Set stack
     6 00000003 89EC                        mov     sp, bp
     7                                  
     8 00000005 BB[A300]                    mov     bx, MSG_REAL_MODE   ; Print the real mode message
     9 00000008 E80500                      call    print
    10                                  
    11 0000000B E85A00                      call    switch_to_pm        ; This is in boot_print_func.asm
    12 0000000E EBFE                        jmp     $                   ; Should never actually get here...
    13                                  
    14                                  %include "print.asm"
     1                              <1> ; This simple function prints stuff!
     2                              <1> print:
     3 00000010 60                  <1>     pusha           ; Save all the registers!
     4                              <1> 
     5                              <1> start:
     6 00000011 8A07                <1>     mov al, [bx]    ; Copy the next character into al
     7 00000013 3C00                <1>     cmp al, 0x00    ; Check if al now contains a null character
     8 00000015 7509                <1>     jne done        ; If al does not contain a null character, loop back to print
     9                              <1> 
    10 00000017 B40E                <1>     mov ah, 0x0e
    11 00000019 CD10                <1>     int 0x10        ; Print whatever is in al
    12                              <1> 
    13 0000001B 83C301              <1>     add bx, 1       ; Increment the "pointer" to point to the next character in the string
    14 0000001E EBF1                <1>     jmp start
    15                              <1> 
    16                              <1> done:
    17 00000020 61                  <1>     popa            ; Restore the registers
    18 00000021 C3                  <1>     ret             ; Return to where we were called
    19                              <1> 
    20                              <1> print_nl:
    21 00000022 60                  <1>     pusha
    22                              <1> 
    23 00000023 B40E                <1>     mov ah, 0x0e
    24 00000025 B00A                <1>     mov al, 0x0a ; newline char
    25 00000027 CD10                <1>     int 0x10
    26 00000029 B00D                <1>     mov al, 0x0d ; carriage return
    27 0000002B CD10                <1>     int 0x10
    28                              <1> 
    29 0000002D 61                  <1>     popa
    30 0000002E C3                  <1>     ret
    31                              <1> 
    32                              <1> 
    15                                  %include "32bit-gdt.asm"
     1                              <1> ; Here comes the GDT!
     2                              <1> gdt_start:
     3 0000002F 00000000            <1>     dd 0x0          ; The GDT must start with a null descriptor
     4 00000033 00000000            <1>     dd 0x0          ; dd is used to define a double word, which is 4 bytes
     5                              <1> 
     6                              <1> ; This is the code segment descriptor
     7                              <1> ; base = 0x0, limit = 0xfffff
     8                              <1> ; First flags:  present (1) privilege (00) descriptor type (1) -> 1001b (b is for binary)
     9                              <1> ; Type flags:   code (1) conforming (0) readable (1) accessed (0) -> 1010b
    10                              <1> ; Second flags: granularity (1) 32-bit default (1) 64-bit segments (0) AVL (0) -> 1100b
    11                              <1> gdt_code:       
    12 00000037 FFFF                <1>     dw 0xffff       ; limit (bits 0-15)
    13 00000039 0000                <1>     dw 0x0          ; Base (bits 0-15)
    14 0000003B 00                  <1>     db 0x0          ; Base (bits 16-23)
    15 0000003C 9A                  <1>     db 10011010b    ; first flags and type flags
    16 0000003D CF                  <1>     db 11001111b    ; second flags and limit (bits 16-19)
    17 0000003E 00                  <1>     db 0x0          ; Base (bits 24-31)
    18                              <1> 
    19                              <1> gdt_data:       ; This is the data segment descriptor
    20                              <1>     ; Same as the code segment descriptor except for type flags
    21                              <1>     ; Type flags:   code (0) expand down (0) writable (1) accessed (0) -> 0010b
    22 0000003F FFFF                <1>     dw 0xffff       ; limit (bits 0-15)
    23 00000041 0000                <1>     dw 0x0          ; Base (bits 0-15)
    24 00000043 00                  <1>     db 0x0          ; Base (bits 16-23)
    25 00000044 92                  <1>     db 10010010b    ; first flags and type flags
    26 00000045 CF                  <1>     db 11001111b    ; second flags and limit (bits 16-19)
    27 00000046 00                  <1>     db 0x0          ; Base (bits 24-31)
    28                              <1> 
    29                              <1> gdt_end:        ; This label makes it easy to calculate the size 
    30                              <1>                 ; of the GDT for the GDT descriptor
    31                              <1> 
    32                              <1> gdt_descriptor:
    33 00000047 1700                <1>     dw gdt_end - gdt_start - 1  ; The size of the GDT is always 1 less than true size
    34 00000049 [2F000000]          <1>     dd gdt_start                ; Start address of the GDT
    35                              <1> 
    36                              <1> ; This comment is copy-and-pasted from the PDF
    37                              <1> ; Define some handy constants for the GDT segment descriptor offsets , which
    38                              <1> ; are what segment registers must contain when in protected mode. For example ,
    39                              <1> ; when we set DS = 0 x10 in PM , the CPU knows that we mean it to use the
    40                              <1> ; segment described at offset 0 x10 ( i.e. 16 bytes ) in our GDT , which in our
    41                              <1> ; case is the DATA segment (0 x0 -> NULL ; 0x08 -> CODE ; 0 x10 -> DATA )
    42                              <1> CODE_SEG equ gdt_code - gdt_start
    43                              <1> DATA_SEG equ gdt_data - gdt_start
    44                              <1> 
    16                                  %include "32bit_print.asm"
     1                              <1> ; There's nothing to run for lesson 8 since we can't run it from the bootloader
     2                              <1> ; until we know how to prepare/use the Global Descriptor Table (GDT), which 
     3                              <1> ; "defines memory segments and their protected-mode attributes".
     4                              <1> 
     5                              <1> [bits 32]                       ; Using 32-bit protected mode
     6                              <1> 
     7                              <1> ; This is how to define a constant:
     8                              <1> VIDEO_MEMORY    equ 0xb8000
     9                              <1> WHITE_ON_BLACK  equ 0x0f        ; This defines the color byte 
    10                              <1> 
    11                              <1> print_string_pm:
    12 0000004D 60                  <1>     pusha
    13 0000004E BA00800B00          <1>     mov edx, VIDEO_MEMORY
    14                              <1> 
    15                              <1> print_string_pm_loop:
    16 00000053 8A03                <1>     mov al, [ebx]               ; [ebs] is the address of the character to load
    17 00000055 B40F                <1>     mov ah, WHITE_ON_BLACK      ; Lower by has the character, upper by has the color
    18                              <1> 
    19 00000057 3C00                <1>     cmp al, 0                   ; Check if we're at the end of the string
    20 00000059 740B                <1>     je print_string_pm_done     ; If we're at the end of the string, we're done!
    21                              <1> 
    22 0000005B 668902              <1>     mov [edx], ax               ; Store character and attribute in video memory
    23 0000005E 83C301              <1>     add ebx, 1                  ; On to the next characer
    24 00000061 83C202              <1>     add edx, 2                  ; And on to the next position in video memory
    25                              <1> 
    26 00000064 EBED                <1>     jmp print_string_pm_loop
    27                              <1> 
    28                              <1> print_string_pm_done:
    29 00000066 61                  <1>     popa
    30 00000067 C3                  <1>     ret
    17                                  %include "32bit-switch.asm"
     1                              <1> ; This file is essentially copied from 
     2                              <1> ; https://github.com/cfenollosa/os-tutorial/tree/master/10-32bit-enter
     3                              <1> 
     4                              <1> [bits 16]
     5                              <1> switch_to_pm:
     6 00000068 FA                  <1>     cli                         ; disable interrupts
     7 00000069 0F0116[4700]        <1>     lgdt    [gdt_descriptor]    ; Load the GDT descriptor
     8 0000006E 0F20C0              <1>     mov     eax, cr0            ; Set 32-bit mode in cr0
     9 00000071 6683C801            <1>     or      eax, 0x1
    10 00000075 0F22C0              <1>     mov     cr0, eax            ; Move result back into cr0
    11 00000078 EA[7D00]0800        <1>     jmp     CODE_SEG:init_pm    ; Execute a far jump by using a different segment
    12                              <1> 
    13                              <1> [bits 32]
    14                              <1> init_pm:                        ; Hey, we're using 32-bit instructions now!
    15 0000007D 66B81000            <1>     mov     ax, DATA_SEG        ; Update all the segment registers
    16 00000081 8ED8                <1>     mov     ds, ax
    17 00000083 8ED0                <1>     mov     ss, ax
    18 00000085 8EC0                <1>     mov     es, ax
    19 00000087 8EE0                <1>     mov     fs, ax
    20 00000089 8EE8                <1>     mov     gs, ax
    21                              <1> 
    22 0000008B BD00000900          <1>     mov     ebp, 0x90000         ; update the stack right at the top of the free space
    23 00000090 89EC                <1>     mov     esp, ebp
    24                              <1>     
    25 00000092 E800000000          <1>     call    BEGIN_PM            ; Call a label with useful code!
    18                                  
    19                                  [bits 32]
    20                                  BEGIN_PM:
    21 00000097 BB[BF000000]                mov     ebx, MSG_PROT_MODE  ; Print 32 bit mode message
    22 0000009C E8ACFFFFFF                  call    print_string_pm
    23 000000A1 EBFE                        jmp     $                   ; Loop here forever
    24                                  
    25 000000A3 537461727465642069-     MSG_REAL_MODE db "Started in 16-bit real mode", 0
    25 000000AC 6E2031362D62697420-
    25 000000B5 7265616C206D6F6465-
    25 000000BE 00                 
    26 000000BF 4C6F61646564203332-     MSG_PROT_MODE db "Loaded 32-bit protected mode", 0
    26 000000C8 2D6269742070726F74-
    26 000000D1 6563746564206D6F64-
    26 000000DA 6500               
    27                                  
    28                                  ; bootsector
    29 000000DC 00<rept>                times 510-($-$$) db 0
    30 000001FE 55AA                    dw 0xaa55
