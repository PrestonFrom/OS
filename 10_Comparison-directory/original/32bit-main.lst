     1                                  ;
     2                                  ;
     3                                  
     4                                  [org 0x7c00] ; bootloader offset
     5 00000000 BD0090                      mov     bp, 0x9000 ; set the stack
     6 00000003 89EC                        mov     sp, bp
     7                                  
     8 00000005 BB[A300]                    mov     bx, MSG_REAL_MODE
     9 00000008 E80500                      call    print ; This will be written after the BIOS messages
    10                                  
    11 0000000B E85A00                      call    switch_to_pm
    12 0000000E EBFE                        jmp     $ ; this will actually never be executed
    13                                  
    14                                  %include "boot_sect_print.asm"
     1                              <1> print:
     2 00000010 60                  <1>     pusha
     3                              <1> 
     4                              <1> ; keep this in mind:
     5                              <1> ; while (string[i] != 0) { print string[i]; i++ }
     6                              <1> 
     7                              <1> ; the comparison for string end (null byte)
     8                              <1> start:
     9 00000011 8A07                <1>     mov al, [bx] ; 'bx' is the base address for the string
    10 00000013 3C00                <1>     cmp al, 0 
    11 00000015 7409                <1>     je done
    12                              <1> 
    13                              <1>     ; the part where we print with the BIOS help
    14 00000017 B40E                <1>     mov ah, 0x0e
    15 00000019 CD10                <1>     int 0x10 ; 'al' already contains the char
    16                              <1> 
    17                              <1>     ; increment pointer and do next loop
    18 0000001B 83C301              <1>     add bx, 1
    19 0000001E EBF1                <1>     jmp start
    20                              <1> 
    21                              <1> done:
    22 00000020 61                  <1>     popa
    23 00000021 C3                  <1>     ret
    24                              <1> 
    25                              <1> 
    26                              <1> 
    27                              <1> print_nl:
    28 00000022 60                  <1>     pusha
    29                              <1>     
    30 00000023 B40E                <1>     mov ah, 0x0e
    31 00000025 B00A                <1>     mov al, 0x0a ; newline char
    32 00000027 CD10                <1>     int 0x10
    33 00000029 B00D                <1>     mov al, 0x0d ; carriage return
    34 0000002B CD10                <1>     int 0x10
    35                              <1>     
    36 0000002D 61                  <1>     popa
    37 0000002E C3                  <1>     ret
    15                                  %include "32bit-gdt.asm"
     1                              <1> gdt_start: 
     2                              <1>     
     3 0000002F 00000000            <1>     dd 0x0 
     4 00000033 00000000            <1>     dd 0x0 
     5                              <1> 
     6                              <1> 
     7                              <1> 
     8                              <1> gdt_code: 
     9 00000037 FFFF                <1>     dw 0xffff    
    10 00000039 0000                <1>     dw 0x0       
    11 0000003B 00                  <1>     db 0x0       
    12 0000003C 9A                  <1>     db 10011010b 
    13 0000003D CF                  <1>     db 11001111b 
    14 0000003E 00                  <1>     db 0x0       
    15                              <1> 
    16                              <1> 
    17                              <1> 
    18                              <1> gdt_data:
    19 0000003F FFFF                <1>     dw 0xffff
    20 00000041 0000                <1>     dw 0x0
    21 00000043 00                  <1>     db 0x0
    22 00000044 92                  <1>     db 10010010b
    23 00000045 CF                  <1>     db 11001111b
    24 00000046 00                  <1>     db 0x0
    25                              <1> 
    26                              <1> gdt_end:
    27                              <1> 
    28                              <1> 
    29                              <1> gdt_descriptor:
    30 00000047 1700                <1>     dw gdt_end - gdt_start - 1 
    31 00000049 [2F000000]          <1>     dd gdt_start 
    32                              <1> 
    33                              <1> 
    34                              <1> CODE_SEG equ gdt_code - gdt_start
    35                              <1> DATA_SEG equ gdt_data - gdt_start
    16                                  %include "32bit-print.asm"
     1                              <1> ;
     2                              <1> ;
     3                              <1> ;
     4                              <1> 
     5                              <1> [bits 32] ; using 32-bit protected mode
     6                              <1> 
     7                              <1> ; this is how constants are defined
     8                              <1> VIDEO_MEMORY equ 0xb8000
     9                              <1> WHITE_ON_BLACK equ 0x0f ; the color byte for each character
    10                              <1> 
    11                              <1> print_string_pm:
    12 0000004D 60                  <1>     pusha
    13 0000004E BA00800B00          <1>     mov edx, VIDEO_MEMORY
    14                              <1> 
    15                              <1> print_string_pm_loop:
    16 00000053 8A03                <1>     mov al, [ebx] ; [ebx] is the address of our character
    17 00000055 B40F                <1>     mov ah, WHITE_ON_BLACK
    18                              <1> 
    19 00000057 3C00                <1>     cmp al, 0 ; check if end of string
    20 00000059 740B                <1>     je print_string_pm_done
    21                              <1> 
    22 0000005B 668902              <1>     mov [edx], ax ; store character + attribute in video memory
    23 0000005E 83C301              <1>     add ebx, 1 ; next char
    24 00000061 83C202              <1>     add edx, 2 ; next video memory position
    25                              <1> 
    26 00000064 EBED                <1>     jmp print_string_pm_loop
    27                              <1> 
    28                              <1> print_string_pm_done:
    29 00000066 61                  <1>     popa
    30 00000067 C3                  <1>     ret
    17                                  %include "32bit-switch.asm"
     1                              <1> ;
     2                              <1> ;
     3                              <1> 
     4                              <1> [bits 16]
     5                              <1> switch_to_pm:
     6 00000068 FA                  <1>     cli                     ; 1. disable interrupts
     7 00000069 0F0116[4700]        <1>     lgdt    [gdt_descriptor]   ; 2. load the GDT descriptor
     8 0000006E 0F20C0              <1>     mov     eax, cr0
     9 00000071 6683C801            <1>     or      eax, 0x1             ; 3. set 32-bit mode bit in cr0
    10 00000075 0F22C0              <1>     mov     cr0, eax
    11 00000078 EA[7D00]0800        <1>     jmp     CODE_SEG:init_pm    ; 4. far jump by using a different segment
    12                              <1> 
    13                              <1> [bits 32]
    14                              <1> init_pm:                    ; we are now using 32-bit instructions
    15 0000007D 66B81000            <1>     mov     ax, DATA_SEG        ; 5. update the segment registers
    16 00000081 8ED8                <1>     mov     ds, ax
    17 00000083 8ED0                <1>     mov     ss, ax
    18 00000085 8EC0                <1>     mov     es, ax
    19 00000087 8EE0                <1>     mov     fs, ax
    20 00000089 8EE8                <1>     mov     gs, ax
    21                              <1> 
    22 0000008B BD00000900          <1>     mov     ebp, 0x90000        ; 6. update the stack right at the top of the free space
    23 00000090 89EC                <1>     mov     esp, ebp
    24                              <1> 
    25 00000092 E800000000          <1>     call    BEGIN_PM           ; 7. Call a well-known label with useful code
    18                                  
    19                                  [bits 32]
    20                                  BEGIN_PM: ; after the switch we will get here
    21 00000097 BB[BF000000]                mov     ebx, MSG_PROT_MODE
    22 0000009C E8ACFFFFFF                  call    print_string_pm ; Note that this will be written at the top left corner
    23 000000A1 EBFE                        jmp     $
    24                                  
    25 000000A3 537461727465642069-     MSG_REAL_MODE db "Started in 16-bit real mode", 0
    25 000000AC 6E2031362D62697420-
    25 000000B5 7265616C206D6F6465-
    25 000000BE 00                 
    26 000000BF 4C6F61646564203332-     MSG_PROT_MODE db "Loaded 32-bit protected mode", 0
    26 000000C8 2D6269742070726F74-
    26 000000D1 6563746564206D6F64-
    26 000000DA 6500               
    27                                  
    28                                  ; bootsector
    29 000000DC 00<rept>                times 510-($-$$) db 0
    30 000001FE 55AA                    dw 0xaa55
