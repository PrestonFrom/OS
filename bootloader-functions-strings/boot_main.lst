     1                                  
     2                                  ; This simple bootsector prints stuff!
     3                                  
     4                                  [org 0x7c00]
     5                                  
     6                                  ;jmp start           ; We need to jump over the print label so we don't automatically 
     7                                                      ; run the "function"
     8                                  
     9                                  %include "boot_include_file.asm"    ; This includes the contents of "boot_include_file.asm"
     1                              <1> [org 0x7c00]
     2                              <1> 
     3                              <1> preprint:
     4 00000000 60                  <1>     pusha           ; Save all the registers!
     5 00000001 B40E                <1>     mov ah, 0x0e    ; Put us in TTY mode
     6 00000003 8A07                <1>     mov al, [bx]    ; Copy the first character to al register for printing
     7                              <1> 
     8                              <1> print:
     9 00000005 CD10                <1>     int 0x10        ; Print whatever is in al
    10 00000007 83C301              <1>     add bx, 1       ; Increment the "pointer" to point to the next character in the string
    11 0000000A 8A07                <1>     mov al, [bx]    ; Copy the next character into al
    12 0000000C 3C00                <1>     cmp al, 0x00    ; Check if al now contains a null character
    13 0000000E 75F5                <1>     jne print       ; If al does not contain a null character, loop back to print
    14 00000010 61                  <1>     popa            ; Restore the registers
    15 00000011 C3                  <1>     ret             ; Return to where we were called
    16                              <1> 
    17                              <1> 
    10                                                                      ; directly in this file, replacing this line.
    11                                  
    12                                  start:
    13 00000012 BD0080                      mov bp, 0x8000  ; Set the stack's base pointer
    14 00000015 89EC                        mov sp, bp      ; And set the stack pointer to the same location
    15                                  
    16 00000017 BB[2300]                    mov bx, the_string      ; Store the address of the_string in bx to be accessed by preprint
    17 0000001A E8E3FF                      call preprint           ; Call the print function!
    18 0000001D BB[3F00]                    mov bx, another_string  ; Repeat for another_string
    19 00000020 E8DDFF                      call preprint           ; Call it again
    20                                  
    21                                  
    22                                  the_string:
    23 00000023 546869732069732061-         db "This is a string to print. ",0
    23 0000002C 20737472696E672074-
    23 00000035 6F207072696E742E20-
    23 0000003E 00                 
    24                                  
    25                                  another_string:
    26 0000003F 48657265277320616E-         db "Here's another one!",0
    26 00000048 6F74686572206F6E65-
    26 00000051 2100               
    27                                  
    28                                  
    29 00000053 EBFE                    jmp $ ; infinite loop
    30                                  
    31                                  ; zero padding and magic bios number
    32 00000055 00<rept>                times 510-($-$$) db 0
    33 000001FE 55AA                    dw 0xaa55
